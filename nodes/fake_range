#!/usr/bin/env python
import rospy
import numpy as np
from geometry_msgs.msg import Pose
from gazebo_msgs.msg import ModelStates
from driving_swarm_positioning.msg import Range

class FakeRangeNode:
    def __init__(self):
        self.publisher = rospy.Publisher("/range", Range, queue_size=5)
        self.positions = {}
        self.pose_sub = rospy.Subscriber("/gazebo/model_states", ModelStates, self._model_states_cb)
    
    def get_range(self, src_frame, dest_frame):
        try:
            dist = np.sqrt((self.positions[src_frame].x - self.positions[dest_frame].x)**2
                    + (self.positions[src_frame].y - self.positions[dest_frame].y)**2)
        except KeyError:
            rospy.logerr("Key not existing")
            print(self.positions.keys())
            return None
        return dist

    def _model_states_cb(self, msg):
        for i, key in enumerate(msg.name):
            self.positions[key] = msg.pose[i].position

    def publish(self, r, src_id, dest_id):
        if r is None:
            return
        range_msg = Range()
        range_msg.range = r
        range_msg.src = src_id
        range_msg.dest = dest_id
        self.publisher.publish(range_msg)
        

    def periodic(self):
        # TODO make parameters flexible and configurable
        rospy.set_param("~test", 0)
        src_frame = rospy.get_param("~src_frame", "tb3_0")
        src_id = rospy.get_param("~src_id", 0)
        dest_frame = rospy.get_param("~dest_frame", "tb3_1")
        dest_id = rospy.get_param("~dest_id", 1)
        r = self.get_range(src_frame, dest_frame)
        rospy.logdebug("got range %s"%r)
        self.publish(r, src_id, dest_id)
        

if __name__ == '__main__':
    rospy.init_node("range")
    node = FakeRangeNode()
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        node.periodic()
        rate.sleep()

    
    rospy.spin()
