#!/usr/bin/env python
import rospy
import numpy as np
from geometry_msgs.msg import TransformStamped
from driving_swarm_positioning.msg import Range
import tf2_ros

class FakeRangeNode:
    def __init__(self):
        self.publisher = rospy.Publisher("/range", Range, queue_size=5)
        self._tf_buffer = tf2_ros.Buffer()
        self._tf_listener = tf2_ros.TransformListener(self._tf_buffer)
    
    def get_range(self, src_frame, dest_frame, offset_x=0.0, offset_y=0.0):
        try:
            tf_odom = self._tf_buffer.lookup_transform(src_frame, dest_frame,rospy.Time())
            x = np.array([tf_odom.transform.translation.x+offset_x, tf_odom.transform.translation.y+offset_y])
            return np.linalg.norm(x)
        except tf2_ros.LookupException:
           rospy.logerr("could not get transform, %s, %s"%(src_frame, dest_frame))
        return None

    def publish(self, r, src_id, dest_id):
        if r is None:
            return
        range_msg = Range()
        range_msg.range = r
        range_msg.src = src_id
        range_msg.dest = dest_id
        self.publisher.publish(range_msg)
        

    def periodic(self):
        # TODO make parameters flexible and configurable
        src_frame = "map"
        src_id = 0
        dest_frame = "base_scan"
        dest_id = 0
        r = self.get_range(src_frame, dest_frame, offset_x=.5, offset_y=.5)
        rospy.loginfo("got range %s"%r)
        self.publish(r, src_id, dest_id)
        

if __name__ == '__main__':
    rospy.init_node("range")
    node = FakeRangeNode()
    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        node.periodic()
        rate.sleep()

    
    rospy.spin()
